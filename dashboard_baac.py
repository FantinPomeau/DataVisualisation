from matplotlib import pyplot as plt
import streamlit as st
import traitement_baac as tb
import streamlit_folium

st.set_page_config(page_title="Application BAAC", page_icon="üöó", layout="wide")

st.title("Dashboard BAAC 2021")
    
with st.sidebar:
    st.header("S√©lection pages")
    
    option_affichage = st.sidebar.radio(
        "Choisissez l'affichage",
        ('G√©n√©ral', 'Usager', 'V√©hicule','Lieux','Machine Learning')
    )   
    
    

# Style for containers
st.markdown(
    """
    <style>
    .data-container {
        border: 1px solid #e1e4e8;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
        background-color: #f6f8fa;
    }
    
    .head-data-container {
        color: #ffffff;
        background-image: url("C:/Users/hugo.razafindralambo/OneDrive - ADDACTIS GROUP/Bureau/Personnel/Datavis/baac/injury-leave-icon-with-png-and-vector-format-for-free-unlimited-920509.png");
        background-color: #0078D4;
        padding: 20px 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        background-size: cover;
        background-position: center;
        }
    
    .data-value {
        font-size: 1.5em;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

col1, col2, col3 = st.columns(3)

nb_acc = len(set(tb.accident_metr['Num_Acc']))
nb_veh = len(set(tb.accident_metr.id_vehicule))
nb_victime = tb.accident_metr[tb.accident_metr['grav']!='4'].shape[0]

with col1:
    st.markdown(f"<div class='head-data-container'>Nombre d'accidents üí•<div class='data-value'>{nb_acc}</div></div>", unsafe_allow_html=True)

with col2:
    st.markdown(f"<div class='head-data-container'>Nombre de v√©hicules impliqu√©s üöó<div class='data-value'>{nb_veh}</div></div>", unsafe_allow_html=True)

with col3:
    st.markdown(f"<div class='head-data-container'>Nombre de victimes bless√©es üë§<div class='data-value'>{nb_victime}</div></div>", unsafe_allow_html=True)


if option_affichage == 'G√©n√©ral':
    col1, col2 = st.columns([2, 1.5])
    
    st.sidebar.var_map = st.sidebar.selectbox(
        "S√©lectionnez le type de donn√©es √† afficher sur la carte",
        ('accident dep', 'gravite')
    )
    
    st.sidebar.var_com = st.sidebar.text_input("Entrez un num√©ro de commune:", value = '75110')
        
    with col1:
        with st.spinner('Chargement de la carte...'):
            streamlit_folium.folium_static(tb.map_accident(st.sidebar.var_map, st.sidebar.var_com), width=800, height=594)
            if st.sidebar.var_map == 'accident dep':
                with st.expander("Commentaire"):
                    st.markdown(f"<b>Description</b>: La cartographie principale permet de constater ici le nombre d'accidents enregistr√©s dans la base BAAC par d√©partement."
                                + "<br> <b>Analyse:</b> On peut observer que les d√©partements ayant les plus grandes densit√© de population (et les plus grandes villes comme Paris, Lyon, Marseille) semblent avoir un nombre plus √©lev√© d'accidents en raison d'une population plus √©lev√©e et donc d'un plus grand nombre de v√©hicules en circulation.", unsafe_allow_html=True)
            else:
                with st.expander("Commentaire"):
                    st.markdown(f"<b>Description</b>: La cartographie principale permet de constater ici la gravit√© moyenne des accidents par d√©partement. [Revoir]"
                                + "", unsafe_allow_html=True)
            
    with col2:
        streamlit_folium.folium_static(tb.map_accident_commune(st.sidebar.var_com), width=590, height=300)
        
        dataframe_height = 270
        dataframe_width = 700
        
        option = st.sidebar.radio("Tableau de donn√©es:", ('Commune', 'D√©partement'))

        if option == 'Commune':
            # Cas 1
            df_com = tb.accident_metr[tb.accident_metr['com'] == st.sidebar.var_com]
            st.dataframe(df_com, height=dataframe_height, width=dataframe_width)
            
            with st.expander("Commentaire"):
                st.markdown(f"<b>Description</b>: La deuxi√®me carte permet de visualiser la localisation g√©ographique des accidents ayant eu lieu dans la commune n¬∞{st.sidebar.var_com}."
                            + "<br> <b>Analyse:</b> On peut observer que les d√©partements ayant les plus grandes densit√© de population (et les plus grandes villes comme Paris, Lyon, Marseille) semblent avoir un nombre plus √©lev√© d'accidents en raison d'une population plus √©lev√©e et donc d'un plus grand nombre de v√©hicules en circulation."
                            + "Les accidents semblent avoir souvent lieu pr√®s des croisements.", unsafe_allow_html=True)
            

        elif option == 'D√©partement':
            # Cas 2
            if st.sidebar.var_map == "accident dep":
                df_to_display_full = tb.accident_nb.copy()
                if 'geometry_dep' in df_to_display_full.columns:
                    df_to_display_full['geometry_dep'] = df_to_display_full['geometry_dep'].astype(str)
                st.dataframe(df_to_display_full, height=dataframe_height, width=dataframe_width)
            elif st.sidebar.var_map == "gravite":
                df_to_display_full = tb.accident_grav.copy()
                if 'geometry_dep' in df_to_display_full.columns:
                    df_to_display_full['geometry_dep'] = df_to_display_full['geometry_dep'].astype(str)
                st.dataframe(df_to_display_full, height=dataframe_height, width=dataframe_width)
                
            with st.expander("Commentaire"):
                st.markdown(f"<b>Description</b>: La cartographie principale permet de constater le nombre d'accidents enregistr√©s dans la base BAAC par d√©partement. La deuxi√®me carte permet de visualiser la localisation des accidents ayant eu lieu dans la commune n¬∞{st.sidebar.var_com}."
                            + "<br> <b>Analyse:</b> On peut observer que les d√©partements ayant les plus grandes densit√© de population (et les plus grandes villes comme Paris, Lyon, Marseille) semblent avoir un nombre plus √©lev√© d'accidents en raison d'une population plus √©lev√©e et donc d'un plus grand nombre de v√©hicules en circulation.", unsafe_allow_html=True)
            
    
    #Alterner accident et gravit√©
    
    
    col1, col2 = st.columns([1, 8])
    
    with col1:
        time_option = st.radio(
            "Choisissez la p√©riode:",
            ('month', 'day')
        )
        
    with col2:
        st.plotly_chart(tb.graph_datetime(time_option), use_container_width=True)
    
    with st.expander("Commentaire"):
        if time_option == 'month':
            time_graph = 'mois'
        else:
            time_graph = 'jour'
        
        st.markdown(f"<b>Description</b>: Ce graphique donne l'√©volution du nombre d'accident par {time_graph} dans l'ensemble de la France m√©tropolitaine."
        + "<br><b>Analyse:</b>  Il y a une tendance g√©n√©rale √† la hausse du nombre d'accidents de janvier √† juillet, avec un pic en juillet. Cela pourrait correspondre √† une augmentation des d√©placements pendant les mois d'√©t√©, notamment en raison des vacances et des voyages de loisirs. Le trafic plus dense et l'augmentation des longs trajets peuvent contribuer √† cette hausse.", unsafe_allow_html=True)
        
    col1, col2 = st.columns([3, 8])
    
    with col1:
        loc = st.text_input("Entrez un commune ou un d√©partement:", value = '75110')
    with col2:
        st.plotly_chart(tb.chart_meteo_loc(loc), use_container_width=True)
    with st.expander("Commentaire"):
        st.markdown(f"<b>Description</b>: Ce graphique circulaire donne la r√©partition des accidents selon la m√©t√©o enregistr√©e sur le moment dans la circonscription {loc}."
        + "<br><b>Analyse:</b> Probabilit√© Statistique : Les conditions de temps normal sont les plus communes dans de nombreuses r√©gions, ce qui signifie simplement qu'il y a plus de v√©hicules sur la route lorsque le temps est clair. Par cons√©quent, le nombre absolu d'accidents sera naturellement plus √©lev√© durant ces p√©riodes. Comportements de Conduite : Lorsque le temps est clair, les conducteurs peuvent √™tre enclins √† conduire plus vite ou √† pr√™ter moins d'attention, sous-estimant les risques associ√©s √† la conduite. Cela peut augmenter la probabilit√© d'accidents malgr√© les bonnes conditions de visibilit√©.", unsafe_allow_html=True)
        
elif option_affichage == 'Usager':
    col1, col2 = st.columns([3,2])
    with col1:
        loc1 = st.text_input("Entrez un commune ou un d√©partement:", value = '75110')
        st.plotly_chart(tb.plot_accidents_by_age_and_sex(loc1), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme en barre donnant la distribution des accidents dans la circonscription {loc1} en fonction du sexe du conducteur."
            + "<br> <b>Analyse:</b> On observe sans surprise une fr√©quence plus √©lev√©e d'accidents chez les conducteurs masculins. Le nombre est aussi plus √©lev√© chez les personnes de moins de 40 ans que chez les personnes √¢g√©es, avec parfois des pics chez les plus jeunes conducteurs."
            + "<br><b>Comportements de Conduite</b> : Des √©tudes montrent souvent que les hommes, en particulier les plus jeunes, ont tendance √† adopter des comportements de conduite plus risqu√©s, tels que la vitesse excessive, la conduite sous l'influence de l'alcool ou de drogues, et moins d'usage de la ceinture de s√©curit√©. <br><b>Fr√©quence et Distance de Conduite</b> : Statistiquement, les hommes pourraient conduire plus fr√©quemment et sur de plus longues distances que les femmes, augmentant ainsi leur exposition au risque d'accident. <br><b>Perception du Risque</b> : Les jeunes conducteurs, en particulier les jeunes hommes, peuvent sous-estimer les risques li√©s √† la conduite et surestimer leurs capacit√©s de conduite, ce qui peut conduire √† des d√©cisions dangereuses sur la route. <br><b>Exp√©rience de Conduite</b> : Les conducteurs de moins de 40 ans ont g√©n√©ralement moins d'exp√©rience que les conducteurs plus √¢g√©s, ce qui peut se traduire par une capacit√© r√©duite √† anticiper et √† r√©agir aux situations dangereuses.", unsafe_allow_html=True)
    col1, col2 = st.columns([3,2])
    with col1:
        loc2 = st.text_input("Entrez un commune ou un d√©partement:", value = '75111')
        st.plotly_chart(tb.plot_average_gravity_by_age_and_sex(loc2), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme en barre donnant la gravit√© moyenne du dommage subi par le conducteur ou l'un des passagers √† bord du v√©hicule dans la circonscription {loc1} en fonction de son sexe."
            + "<br> <b>Analyse:</b> On observe souvent un pic chez les personnes ag√©es qui peut √™tre due √† leur plus grande vuln√©rabilit√©. On n'observe pas de diff√©rence significative selon les sexes.", unsafe_allow_html=True)
    col1, col2 = st.columns([3,2])
    with col1:
        loc3 = st.text_input("Entrez un commune ou un d√©partement:", value = '75112')
        st.plotly_chart(tb.plot_gravity_by_age_sex_manoeuvre(loc3), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme en barre donnant la gravit√© moyenne du dommage subi par la victime pi√©tonne dans la circonscription {loc1} en fonction de son sexe et de son comportement pr√©c√©dant l'accident."
            + "<br>Indices des maneouvres du pi√©ton: <br>'1': Se d√©pla√ßant au sens du v√©hicule heurtant, <br>'2': Se d√©place au sens inverse du v√©hicule, <br>'3': Traversant, <br>'4': Masqu√©, <br>'5': Jouant - courant, <br>'6': Avec animal, <br>'9': Autre, <br>'A': Monte/descend du v√©hicule, <br>'B': Inconnue, <br>'IRLVT': Non renseign√© ou sans objet.", unsafe_allow_html=True)
        
elif option_affichage == 'V√©hicule':
    col1, col2 = st.columns([3,2])
    with col1:
        loc1 = st.text_input("Entrez un commune ou un d√©partement:", value = '75110')
        st.plotly_chart(tb.plot_accidents_by_obst_fixe(loc1), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme circulaire donnant la r√©partition des accidents selon l'obstacle fixe rencontr√© dans la circonscription {loc1}."
            + "<br>Indices des obstacles fixes: <br>'1': V√©hicule en stationnement, <br>'2': Arbre, <br>'3'; Glissi√®re m√©tallique, <br>'4': Glissi√®re b√©ton, <br>'5': Autre glissi√®re, <br>'6': B√¢timent, mur, pile de pont, <br>'7': Support de signalisation verticale ou poste d'appel d'urgence, <br>'8': Poteau, <br>'9': Mobilier urbain, <br>'10': Parapet, <br>'11': Ilot, refuge, borne haute, <br>'12': Bordure de trottoir, <br>'13': Foss√©, talus, paroi rocheuse, <br>'14': Autre obstacle fixe sur chasus√©e, <br>'15': Autre obstacle fixe sur trottoir ou accotement, <br>'16': Sortie de chauss√©e sans obstacle, <br>'17': Buse - t√™te d'aqueduc, <br>'IRLVT': Non renseign√© ou sans objet."
            + "<br><b>Analyse:</b> L'obstacle 'Foss√©, talus, paroi rocheuse' semble √™tre celui ayant la plus grande fr√©quence dans la plupart des d√©partements. Dans les communes urbanis√©es, les gliss√®res, les poteaux et les v√©hicules stationn√©s sont r√©currents.", unsafe_allow_html=True)
        
    col1, col2 = st.columns([3,2])
    with col1:
        loc2 = st.text_input("Entrez un commune ou un d√©partement:", value = '75111')
        st.plotly_chart(tb.plot_accidents_by_obst_mobile(loc2), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme circulaire donnant la r√©partition des accidents selon l'obstacle mobile rencontr√© dans la circonscription {loc1}."
            + "<br>Indices des obstacles mobiles: <br>'1': Pi√©ton, <br>'2': V√©hicule, <br>'4': V√©hicule sur rail, <br>'5': Animal domestique, <br>'6': Animal sauvage, <br>'9': Autre', <br>'IRLVT': Non renseign√© ou aucun."
            + "<br><b>Analyse:</b> L'obstacle mobile le plus fr√©quemment impliqu√© dans un accident auto est le v√©hicule, suivi du pi√©ton, ce qui est logique puisque ce sont les obstacles les plus fr√©quemment rencontr√©s dans une route.", unsafe_allow_html=True)
    col1, col2 = st.columns([3,2])
    with col1:
        loc3 = st.text_input("Entrez un commune ou un d√©partement:", value = '75112')
        st.plotly_chart(tb.plot_accidents_by_type_veh(loc3), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme circulaire donnant la r√©partition des accidents selon le type de v√©hicule, dans la circonscription {loc1}."
            + "<br>Indices des types de v√©hicule: <br>1: Bicyclette, <br>2: Cyclomoteur < 50cm3, <br>3: Voiturette, <br>7: VL seul, <br>10: VU seul 1.5T <= PTAC <= 3.5T avec ou sans remorque, <br>13: PL seul 3.5T < PTCA <= 7.5T, <br>14: PL seul > 7.5T, <br>15: PL > 3.5T + remorque, <br>16: Tracteur routier seul, <br>17: Tracteur routier + semi remorque, <br>20: Engin sp√©cial, <br>21: Tracteur agricole, <br>30: Scooter < 50 cm3, <br>31: Motocyclette > 50 cm3 et <= 125 cm3, <br>32: Scooter > 50 cm3 et <= 125 cm3, <br>33: Motocyclette > 125 cm3, <br>34: Scooter > 125 cm3, <br>35: Quad l√©ger <= 50 cm3, <br>36: Quad lourd > 50 cm3, <br>37: Autobus, <br>38: Autocar, <br>39: Train, <br>40: Tramway, <br>41: 3RM <= 50 cm3, <br>42: 3RM > 50 cm3 <= 125 cm3, <br>43: 3RM > 125 cm3, <br>50: EDP √† moteur, <br>60: EDP sans moteur, <br>80: VAE, 99: Autre v√©hicule."
            + "<br><b>Analyse:</b> Le type de v√©hicule le plus impliqu√© dans un accident est le v√©hicule l√©ger.", unsafe_allow_html=True)

        
elif option_affichage == 'Lieux':
    col1, col2 = st.columns([3,2])
    with col1:
        loc1 = st.text_input("Entrez un commune ou un d√©partement:", value = '75110')
        st.plotly_chart(tb.plot_accidents_by_type_route(loc1), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme en barre donnant la distribution des accidents par type de route dans la circonscription {loc1}."
            + "<br>Indices des types de route: <br>1: Autoroute, <br>2: Route nationale, <br>3: Route d√©partementale, <br>4: Voie Communales, <br>5: Hors r√©seau public, <br>6: Parc de stationnement ouvert √† la circulation publique, <br>7: Routes de m√©tropole urbiane, <br>9: Autre."
            + "<br><b>Analyse:</b>", unsafe_allow_html=True)

    col1, col2 = st.columns([3,2])
    with col1:
        loc2 = st.text_input("Entrez un commune ou un d√©partement:", value = '75111')
        st.plotly_chart(tb.plot_accidents_by_surface(loc2), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme en barre donnant la distribution des accidents par √©tat de la surface de la route dans la circonscription {loc1}."
            + "<br>Indices des types de route: <br>1: Normale, <br>2: Mouill√©e, <br>3: Flaques, <br>4: Inond√©e, <br>5: Enneig√©e, <br>6: Boue, <br>7: Verglac√©e, <br>8: Corps gras - huile, <br>9: Autre."
            + "<br><b>Analyse:</b>", unsafe_allow_html=True)
    col1, col2 = st.columns([3,2])
    with col1:
        loc3 = st.text_input("Entrez un commune ou un d√©partement:", value = '75112')
        st.plotly_chart(tb.plot_accidents_by_vitesse(loc3), use_container_width=True)
    with col2:
        st.markdown("<br>" * 1, unsafe_allow_html=True) 
        with st.expander("Commentaire"):
            st.markdown(f"<b>Description</b>: Ce graphique est un diagramme en barre donnant la distribution des accidents par vitesse autoris√©e dans la route dans la circonscription {loc1}."
            + "<br><b>Analyse:</b>", unsafe_allow_html=True)
        
elif option_affichage == 'Machine Learning':  
    st.write("Pr√©diction KNN √† partir de l'ann√©e de naissance , de la vitesse autoris√©e, de la gravit√© et du sexe: le type d'obstacle rencontr√©, 1 pour mobile ,0 pour fixe")
    k = int(st.slider("Choisissez le nombre de voisins (k)", 1, 15, 3))
    vitesse = int(st.slider("vitesse autoris√©e", 30,110,50))
    sexe = int(st.slider("sexe", 1,2))
    ann√©e_naissance = int(st.slider("ann√©e de naissance", 1940, 2023, 1980))
    gravit√© = int(st.slider("gravit√©", 1, 4, 2))
    accuracy,prediction,y_pred=tb.predictionKNN(k,sexe,ann√©e_naissance,gravit√©,vitesse)
    st.write(f"Pr√©cision du mod√®le : {accuracy:.2f}")
    st.write(f"La classe pr√©dite est : {prediction[0]}")
    # Cr√©ation d'un graphique de dispersion (scatter plot)
    
    fig, ax = plt.subplots()
    ax.scatter(tb.X_test.iloc[:, 0].values, tb.X_test.iloc[:, 3].values, c=y_pred, cmap='viridis', marker='o', edgecolor='k')
    scatter=ax.scatter(tb.X_test.iloc[:, 0].values, tb.X_test.iloc[:, 3].values, c=y_pred, cmap='viridis', marker='o', edgecolor='k')
    # L√©gende du graphique
    handles, labels = scatter.legend_elements()
    ax.legend(handles, labels, title="Classes")

    # Axes du graphique
    ax.set_xlabel('vitesse')
    ax.set_ylabel('gravit√©')
    ax.set_title('Pr√©dictions du mod√®le K-NN')

    # Affichage du graphique dans Streamlit
    st.pyplot(fig)
    
#streamlit run c:\users\hugo.razafindralambo\.spyder-py3\dashboard_baac.py